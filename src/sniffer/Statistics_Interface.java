package sniffer;

import java.awt.EventQueue;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import static sniffer.Statistical_Analysis.con;
import static sniffer.Statistics_Interface.dtmprotocol;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Rishabh
 */
public class Statistics_Interface extends javax.swing.JFrame {

    /**
     * Creates new form Statistics_Interface
     */
    public Statistics_Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 700));
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(50, 90, 560, 220);

        jTabbedPane1.addTab("Packet Length", jPanel1);

        jPanel2.setLayout(null);

        jLabel1.setText("Total packets");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(10, 20, 80, 20);

        jLabel2.setText("Total Streams");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(420, 20, 80, 20);

        jTextField2.setEditable(false);
        jPanel2.add(jTextField2);
        jTextField2.setBounds(100, 10, 100, 30);

        jTextField3.setEditable(false);
        jPanel2.add(jTextField3);
        jTextField3.setBounds(510, 10, 90, 30);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jPanel2.add(jScrollPane2);
        jScrollPane2.setBounds(30, 160, 570, 260);

        jLabel4.setText("Total time");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(230, 20, 50, 20);

        jTextField4.setEditable(false);
        jPanel2.add(jTextField4);
        jTextField4.setBounds(300, 10, 100, 30);

        jLabel5.setText("Stream");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(160, 60, 50, 20);
        jPanel2.add(jTextField5);
        jTextField5.setBounds(220, 50, 100, 30);

        jButton2.setText("Fetch");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);
        jButton2.setBounds(340, 50, 73, 23);

        jLabel6.setText("Host ");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(100, 100, 50, 14);

        jLabel7.setText("Destination");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(100, 130, 54, 14);

        jTextField6.setEditable(false);
        jPanel2.add(jTextField6);
        jTextField6.setBounds(170, 90, 130, 30);

        jTextField7.setEditable(false);
        jPanel2.add(jTextField7);
        jTextField7.setBounds(170, 120, 130, 30);

        jLabel8.setText("Total Packets");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(380, 100, 80, 14);

        jTextField8.setEditable(false);
        jPanel2.add(jTextField8);
        jTextField8.setBounds(480, 90, 80, 30);

        jTextField9.setEditable(false);
        jPanel2.add(jTextField9);
        jTextField9.setBounds(480, 120, 80, 30);

        jLabel9.setText("Total time");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(380, 130, 70, 14);

        jTabbedPane1.addTab("TCP Flow Diagram", jPanel2);

        jPanel3.setLayout(null);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jPanel3.add(jScrollPane3);
        jScrollPane3.setBounds(90, 20, 452, 402);

        jTabbedPane1.addTab("Protocol", jPanel3);

        jPanel4.setLayout(null);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable4);

        jPanel4.add(jScrollPane4);
        jScrollPane4.setBounds(90, 30, 452, 310);

        jTabbedPane1.addTab("App Analysis", jPanel4);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(19, 46, 660, 460);

        jButton1.setText("FETCH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(410, 10, 65, 30);
        getContentPane().add(jTextField1);
        jTextField1.setBounds(280, 10, 100, 30);

        jLabel3.setText("Filename");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(200, 10, 70, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents
static Connection con;
static String filename;
static Statement stmt;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
filename=jTextField1.getText();
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/network_anal", "root", "admin");
            stmt = con.createStatement();
            //stmt.execute("Insert into network_anal values("+);
            
        } catch (Exception e) {
        }
        EventQueue.invokeLater(new Runnable() {
    @Override
    public void run() {
       packetlength();  
    }
});
        EventQueue.invokeLater(new Runnable() {
    @Override
    public void run() {
        flags();
    }
});
  
        try {
            flow();
        } catch (SQLException ex) {
            Logger.getLogger(Statistics_Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        EventQueue.invokeLater(new Runnable() {
    @Override
    public void run() {
       protocol();
    }
});
        EventQueue.invokeLater(new Runnable() {
    @Override
    public void run() {
       httpvshttps();
    }
});
       EventQueue.invokeLater(new Runnable() {
    @Override
    public void run() {
      app_anal();
    }
});
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
int streamno=Integer.parseInt(jTextField5.getText());
dtmflow=new DefaultTableModel(new String[]{"time","host","direction","destination","comments"}, 0);
jTable2.setModel(dtmflow);
flow2(streamno);

// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
static DefaultTableModel dtm_table1;
    static void packetlength(){

    dtm_table1=new DefaultTableModel(new String[]{"Length","Count","Total Size","Min length","Avg length","Max length"},0);
    jTable1.setModel(dtm_table1);
    ArrayList<String> ar=new ArrayList<>();
    ar.add("0 and 50");
    ar.add("51 and 150");
    ar.add("151 and 300");
    ar.add("301 and 600");
    ar.add("601 and 1000");
    ar.add("1001 and 1500");
    ar.add("1501 and 3000");
    ar.add("3001 and 6000");
new SwingWorker<Void,node>() {
    int a;    
    @Override
        protected Void doInBackground() throws Exception {
           ResultSet rst=stmt.executeQuery("select count(id),min(size),avg(size),max(size),sum(size) from "+filename+"_packetinfo");
            if(rst.next())
    publish(new node("All",rst.getInt(1),rst.getLong(5),rst.getInt(2),rst.getInt(3),rst.getInt(4)));
           for(int i=0;i<ar.size();i++)
{
     rst=stmt.executeQuery("select count(id),min(size),avg(size),max(size),sum(size) from "+filename+"_packetinfo where size between "+ar.get(i) );
    
    if(rst.next())
    publish(new node(ar.get(i),rst.getInt(1),rst.getLong(5),rst.getInt(2),rst.getInt(3),rst.getInt(4)));
}
            return null;
        }
        
        @Override
        protected void process(List<node> nod){
        for(node x:nod)
            
            dtm_table1.addRow(new String[]{x.range,x.count+"",x.total+"",x.min+"",x.avg+"",x.max+""});
                
            
        }
    }.execute();





}
    static Statement stmtflags;
 static void flags(){
        try {
            new SwingWorker<Void,Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    stmtflags=con.createStatement();
            int MF=0,RST=0,FIN=0,SYN=0,total=0,totaltime=0;
            ResultSet rst=stmtflags.executeQuery("select count(*) from "+filename+"_flagsvalue");
            if(rst.next())total=rst.getInt(1);
            
            rst=stmtflags.executeQuery("select max(time) from "+filename+"_flow");
            if(rst.next())totaltime=rst.getInt(1);
            rst=stmtflags.executeQuery("select count(*) from "+filename+"_flagsvalue where MF=1");
            if(rst.next())MF=rst.getInt(1);
            
            rst=stmtflags.executeQuery("select count(*) from "+filename+"_flagsvalue where RST=1");
            if(rst.next())RST=rst.getInt(1);
            
            rst=stmtflags.executeQuery("select count(*) from "+filename+"_flagsvalue where SYN=1 and ACK=1");
            if(rst.next())SYN=rst.getInt(1);
            
            rst=stmtflags.executeQuery("select count(*) from "+filename+"_flagsvalue where FIN=1");
            if(rst.next())FIN=rst.getInt(1);
                
            
            
            
                    analysis_2.createflagschart(total, MF,RST,SYN,FIN);
            
            
            
            
                
                
                return null;
                }
            }.execute();
            
            
            
        } catch (Exception ex) {
            Logger.getLogger(Statistics_Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
 
 
 
 
 }
 static DefaultTableModel dtmflow;
 static Statement stmtflow;
 static void flow() throws SQLException{
 dtmflow=new DefaultTableModel(new String[]{"time","host","direction","destination","comments"}, 0);   
 jTable2.setModel(dtmflow);
        try {
            stmtflow=con.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(Statistics_Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
         long count=0,maxtime=0,streams=0;
         ResultSet rst=stmtflow.executeQuery("select count(*) from "+filename+"_flow");
         if(rst.next())count=rst.getInt(1);
         
         rst=stmtflow.executeQuery("select count(distinct stream) from "+filename+"_flow");
         if(rst.next()){streams=rst.getInt(1);}
         
         rst=stmtflow.executeQuery("select max(time) from "+filename+"_flow");
         if(rst.next())maxtime=rst.getLong(1);
         
         
         jTextField2.setText(count+"");
         jTextField3.setText(streams+"");
        
         jTextField4.setText(((double)maxtime/1000000)+"");
 
 
 
 
 }
 static DefaultTableModel dtmprotocol;
 static Statement stmtprotocol;
 static void protocol(){
 dtmprotocol = new DefaultTableModel(new String[]{"Packet type", "Number"}, 0);
    jTable3.setModel(dtmprotocol);
        try {
            stmtprotocol=con.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(Statistics_Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
         
     
        new SwingWorker<Void,Void>() {
            int total_packets=0,udp=0,tcp=0,http=0,ethernet=0,ip4=0,ip6=0,arp=0,icmp=0,ppp=0,https=0;
     @Override
     protected Void doInBackground() throws Exception {
          ResultSet rst=stmtprotocol.executeQuery("select count(*) from "+filename+"_packetinfo");
         if(rst.next())total_packets=rst.getInt(1);
         
         rst=stmtprotocol.executeQuery("select count(*) from "+filename+"_packetinfo where ETHERNET=1");
         if(rst.next()){ethernet=rst.getInt(1);}
         
         rst=stmtprotocol.executeQuery("select count(*) from "+filename+"_packetinfo where IPv4=1");
         if(rst.next()){ip4=rst.getInt(1);}
         
         rst=stmtprotocol.executeQuery("select count(*) from "+filename+"_packetinfo where IPv6=1");
         if(rst.next()){ip6=rst.getInt(1);}
         
         rst=stmtprotocol.executeQuery("select count(*) from "+filename+"_packetinfo where TCP=1");
         if(rst.next()){tcp=rst.getInt(1);}
         
         rst=stmtprotocol.executeQuery("select count(*) from "+filename+"_packetinfo where UDP=1");
         if(rst.next()){udp=rst.getInt(1);}
         
         rst=stmtprotocol.executeQuery("select count(*) from "+filename+"_packetinfo where HTTP=1");
         if(rst.next()){http=rst.getInt(1);}
         
         rst=stmtprotocol.executeQuery("select count(*) from "+filename+"_packetinfo where HTTPS=1");
         if(rst.next()){https=rst.getInt(1);}
         
         rst=stmtprotocol.executeQuery("select count(*) from "+filename+"_packetinfo where ARP=1");
         if(rst.next()){arp=rst.getInt(1);}
         
         rst=stmtprotocol.executeQuery("select count(*) from "+filename+"_packetinfo where ICMP=1");
         if(rst.next()){icmp=rst.getInt(1);}
         
         rst=stmtprotocol.executeQuery("select count(*) from "+filename+"_packetinfo where PPP=1");
         if(rst.next()){ppp=rst.getInt(1);}
         
         dtmprotocol.addRow(new String[]{"All types", total_packets + ""});
        dtmprotocol.addRow(new String[]{"ETH", ethernet + ""});
        dtmprotocol.addRow(new String[]{"IPv4", ip4 + ""});
        dtmprotocol.addRow(new String[]{"IPv6", ip6 + ""});
        dtmprotocol.addRow(new String[]{"TCP", tcp + ""});
        dtmprotocol.addRow(new String[]{"UDP", udp + ""});
        dtmprotocol.addRow(new String[]{"HTTP", http + ""});
        dtmprotocol.addRow(new String[]{"HTTPS", https + ""});
        dtmprotocol.addRow(new String[]{"ARP", arp + ""});
         dtmprotocol.addRow(new String[]{"ICMP", icmp + ""});
         dtmprotocol.addRow(new String[]{"PPP", ppp + ""});
         
         return null;
     }
 }.execute();
            
       
        
        
        
        
      
    
 }
 static Statement stmthttphttps;
 static void httpvshttps(){
        try {
            new SwingWorker<Void,Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    stmthttphttps=con.createStatement();
            long http=0,https=0,httplen=0,httpslen=0;
            
            ResultSet rst=stmthttphttps.executeQuery("select count(*) from "+filename+"_packetinfo where HTTP=1");
            if(rst.next())http=rst.getLong(1);
            
            rst=stmthttphttps.executeQuery("select count(*) from "+filename+"_packetinfo where HTTPS=1");
            if(rst.next())https=rst.getLong(1);
              
            rst=stmthttphttps.executeQuery("select sum(size) from "+filename+"_packetinfo where HTTP=1");
            if(rst.next())httplen=rst.getLong(1);
               
             rst=stmthttphttps.executeQuery("select sum(size) from "+filename+"_packetinfo where HTTPS=1");
            if(rst.next())httpslen=rst.getLong(1);
               
            
            
            
                    analysis_2.createhttpvshttpschart(httplen,httpslen,http,https);
            
            
            
            
                
                
                return null;
                }
            }.execute();
            
            
            
        } catch (Exception ex) {
            Logger.getLogger(Statistics_Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
 
 
 
 
 }
 static void flow2(int streamno){
     //int streamno=Integer.parseInt(jte)
 new SwingWorker<Void,flownode>() {
     
     @Override
     protected Void doInBackground() throws Exception {
         long count=0,maxtime=0;
         String source = null,destination = null;
         ResultSet rst=stmtflow.executeQuery("select count(*) from "+filename+"_flow where Stream="+streamno);
         if(rst.next())count=rst.getInt(1);
         
         rst=stmtflow.executeQuery("select max(time)-min(time) from "+filename+"_flow where Stream="+streamno);
         if(rst.next()){maxtime=rst.getInt(1);}
         
         rst=stmtflow.executeQuery("select * from "+filename+"_flow where Stream="+streamno);
         if(rst.next()){source=rst.getString(3);destination=rst.getString(7);}
         
         
         jTextField6.setText(source);
         jTextField7.setText(destination);
        
         jTextField8.setText(count+"");
         jTextField9.setText(((double)maxtime/(double)1000000)+"");
          rst=stmtflow.executeQuery("select * from "+filename+"_flow where Stream="+streamno);
         while(rst.next()){
         publish(new flownode(rst.getInt(2),rst.getInt(4), rst.getInt(5), rst.getInt(6),rst.getString(8)));
         
         }
         return null;
     }
     
     
     @Override
     protected void process(List<flownode> chunks){
     for(flownode x:chunks){
     
     if(x.direc==1){
     
     dtmflow.addRow(new String[]{((double)(x.time)/(double)1000000)+"",x.host+"","-------->",x.destination+"",x.comments});
     }
     else
     {
      dtmflow.addRow(new String[]{((double)(x.time)/(double)1000000)+"",x.host+"","<--------",x.destination+"",x.comments});
     }
     
     
     }
     
     }
 }.execute();
 
 }
 
 static DefaultTableModel dtmapp;
 static Statement stmtapp;
 static void app_anal(){
 dtmapp = new DefaultTableModel(new String[]{"App name", "Total flow size(KB)","No. of packets"}, 0);
    jTable4.setModel(dtmapp);
        try {
            stmtprotocol=con.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(Statistics_Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
         
     
        new SwingWorker<Void,Void>() {
           String appname="";
           int size=0,count=0;
     @Override
     protected Void doInBackground() throws Exception {
          ResultSet rst=stmtprotocol.executeQuery("select appname,"
                  + "sum(size),count(*) from "+filename+"_packetinfo pi,"
                  + ""+filename+"_netstat n,"+filename+"_tasklist t,"
                  + ""+filename+"_flow f where" +
"     n.pid=t.pid and" +
"     pi.id=f.id and" +
"     ((f.source_ip=\"192.168.118.111\" and f.source=n.source_port) or" +
"     (f.dest_ip=\"192.168.118.111\" and f.destination=n.source_port))" +
"     group by(appname);");
         while(rst.next()){appname=rst.getString(1);
                        size=rst.getInt(2)/1000;
                        count=rst.getInt(3);
                        
         dtmapp.addRow(new String[]{appname,size+" KB",count+""});
         }
         
         
        
         
         return null;
     }
 }.execute();
            
       
        
        
        
        
      
    
 }
 
    
public static class flownode{
int time,host,direc,destination;
String comments;
public flownode(int time,int host,int direc,int destination,String comments){

this.time=time;
this.host=host;

this.direc=direc;
this.destination=destination;
this.comments=comments;

}

}    
public static class node{
String range;
int count,min,avg,max;
long total;
public node(String range,int count,long total,int min,int avg,int max){this.total=total;this.range=range;this.count=count;this.min=min;this.avg=avg;this.max=max;}
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Statistics_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Statistics_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Statistics_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Statistics_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Statistics_Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    protected static javax.swing.JPanel jPanel1;
    protected static javax.swing.JPanel jPanel2;
    protected static javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    public static javax.swing.JTabbedPane jTabbedPane1;
    protected static javax.swing.JTable jTable1;
    protected static javax.swing.JTable jTable2;
    protected static javax.swing.JTable jTable3;
    public static javax.swing.JTable jTable4;
    private javax.swing.JTextField jTextField1;
    protected static javax.swing.JTextField jTextField2;
    public static javax.swing.JTextField jTextField3;
    protected static javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    public static javax.swing.JTextField jTextField6;
    public static javax.swing.JTextField jTextField7;
    public static javax.swing.JTextField jTextField8;
    public static javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
