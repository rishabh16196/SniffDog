/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sniffer;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Rishabh
 */
public class httpvshttps extends javax.swing.JFrame {

    /**
     * Creates new form httpvshttps
     */
    public httpvshttps() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(700, 600));
        setSize(new java.awt.Dimension(700, 600));
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Run", "Total packets", "total streams", "total bytes", "Avg packet size", "load time", "handshake time"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(6).setResizable(false);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(20, 30, 520, 120);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Run", "total packets", "total streams", "total size", "avg packet size", "Load time", "handshake time"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(20, 240, 520, 140);

        jTabbedPane1.addTab("tab1", jPanel1);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(12, 67, 560, 440);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(230, 10, 73, 23);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Connection con;
        Statement stmt = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/network_anal", "root", "admin");
            stmt = con.createStatement();
            //stmt.execute("Insert into network_anal values("+);

        } catch (Exception e) {
        }
        ResultSet rst;
        HashMap<Integer, String> hm = new HashMap<>();
        hm.put(1, "first");
        hm.put(2, "second");
        hm.put(3, "third");
        hm.put(4, "fourth");
        hm.put(5, "fifth");
        hm.put(6,"sixth");
        hm.put(7,"seventh");
        hm.put(8,"eighth");
        hm.put(9,"ninth");
        hm.put(10,"tenth");
        Vector<String> v = new Vector<>();
        v.add("Total packets");
        v.add("total streams");
        v.add("total bytes");
        v.add("avg packet size");
        v.add("load time");
        v.add("handshake");
        DefaultTableModel tm = new DefaultTableModel(v, 0);
        jTable1.setModel(tm);
        
        DefaultTableModel tm1 = new DefaultTableModel(v, 0);
        jTable2.setModel(tm1);
        int totalpackets = 0, totalstreams = 0, totalbytes = 0, avgpacksize = 0, loadtime = 0, handshake = 0;
        int totalpacketss = 0, totalstreamss = 0, totalbytess = 0, avgpacksizes = 0, loadtimes = 0, handshakes = 0;
        for (int i = 1; i <= 5; i++) {
            try {
                rst = stmt.executeQuery("select count(*) from http" + hm.get(i));
                if (rst.next()) {
                    totalpackets = rst.getInt(1);
                }

                rst = stmt.executeQuery("select count(distinct stream) from http" + hm.get(i));
                if (rst.next()) {
                    totalstreams = rst.getInt(1);
                }

                rst = stmt.executeQuery("select sum(length) from http" + hm.get(i) + "a");
                if (rst.next()) {
                    totalbytes = rst.getInt(1);
                }

                rst = stmt.executeQuery("select avg(length) from http" + hm.get(i) + "a");
                if (rst.next()) {
                    avgpacksize = rst.getInt(1);
                }

                rst = stmt.executeQuery("select max(time) from http" + hm.get(i));
                if (rst.next()) {
                    loadtime = rst.getInt(1);
                }

                rst = stmt.executeQuery("select min(time) as time,stream from http" + hm.get(i) + ",http" + hm.get(i) + "a where http" + hm.get(i) + ".id=http" + hm.get(i) + "a.id and http" + hm.get(i) + "a.estb=1 group by stream;");
                if (rst.next()) {
                    handshake = rst.getInt(1);
                }
                
                //now for https
                
                rst = stmt.executeQuery("select count(*) from https" + hm.get(i));
                if (rst.next()) {
                    totalpacketss = rst.getInt(1);
                }

                rst = stmt.executeQuery("select count(distinct stream) from https" + hm.get(i));
                if (rst.next()) {
                    totalstreamss = rst.getInt(1);
                }

                rst = stmt.executeQuery("select sum(length) from https" + hm.get(i) + "a");
                if (rst.next()) {
                    totalbytess = rst.getInt(1);
                }

                rst = stmt.executeQuery("select avg(length) from https" + hm.get(i) + "a");
                if (rst.next()) {
                    avgpacksizes = rst.getInt(1);
                }

                rst = stmt.executeQuery("select max(time) from https" + hm.get(i));
                if (rst.next()) {
                    loadtimes = rst.getInt(1);
                }

                rst = stmt.executeQuery("select min(time) as time,stream from https" + hm.get(i) + ",https" + hm.get(i) + "a where https" + hm.get(i) + ".id=https" + hm.get(i) + "a.id and https" + hm.get(i) + "a.estb=1 group by stream;");
                if (rst.next()) {
                    handshakes = rst.getInt(1);
                }
                

            } catch (SQLException ex) {
                Logger.getLogger(httpvshttps.class.getName()).log(Level.SEVERE, null, ex);
            }
            //System.out.println(totalpackets + " " + totalstreams + " ");
            tm.addRow(new String[]{totalpackets + "", totalstreams + "", totalbytes + "", avgpacksize + "bytes", loadtime + "ms", handshake + "ms"});
            tm1.addRow(new String[]{totalpacketss + "", totalstreamss + "", totalbytess + "", avgpacksizes + "bytes", loadtimes + "ms", handshakes + "ms"});
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(httpvshttps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(httpvshttps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(httpvshttps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(httpvshttps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new httpvshttps().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
